# ---------------------------------------------------------------------------
# functions.ini is part of the shplit project.
#
# Copyright 2021 Doyle "weibullguy" Rowland
#
# This file contains various helper functions used by shplit.
# ---------------------------------------------------------------------------

add_to_path() {
    # -----------------------------------------------------------------------
    # Add a directory to the $PATH.
    #
    # $1 is the directory to add.
    # $2 determines whether it is added to the end (append) or 
    #    beginning (prepend)
    # -----------------------------------------------------------------------
    local _folder=$1
    local _position=$2

    echo $PATH | sed 's/:/ /g' | grep $_folder &> /dev/null
    _do_add=$?

    if [ "$_position" = "append" ]; then
        [ $_do_add -ne 0 ] && [ -d $_folder ] && [ -x $_folder ] && PATH=$PATH:$_folder
    elif [ "$_position" = "prepend" ]; then
        [ $_do_add -ne 0 ] && [ -d $_folder ] && [ -x $_folder ] && PATH=$_folder:$PATH
    fi
    
    export PATH
}

add_to_pkg_config_path() {
    # -----------------------------------------------------------------------
    # Add a directory to the $PKG_CONFIG_PATH.
    #
    # $1 is the directory to add.
    # $2 determines whether it is added to the end (append) or 
    #    beginning (prepend)
    # -----------------------------------------------------------------------
    local _folder=$1
    local _position=$2

    echo $PKG_CONFIG_PATH | sed 's/:/ /g' | grep $_folder &> /dev/null
    _do_add=$?

    if [ "$_position" = "append" ]; then
        [ $_do_add -ne 0 ] && [ -d $_folder ] && [ -x $_folder ] && PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$_folder
    elif [ "$_position" = "prepend" ]; then
        [ $_do_add -ne 0 ] && [ -d $_folder ] && [ -x $_folder ] && PKG_CONFIG_PATH=$_folder:$PKG_CONFIG_PATH
    fi

    export PKG_CONFIG_PATH
}

add_to_ld_library_path() {
    # -----------------------------------------------------------------------
    # Add a directory to the $PKG_CONFIG_PATH.
    #
    # $1 is the directory to add.
    # $2 determines whether it is added to the end (append) or 
    #    beginning (prepend)
    # -----------------------------------------------------------------------
    local _folder=$1
    local _position=$2

    echo $LD_LIBRARY_PATH | sed 's/:/ /g' | grep $_folder &> /dev/null
    _do_add=$?

    if [ "$_position" = "append" ]; then
        [ $_do_add -ne 0 ] && [ -d $_folder ] && [ -x $_folder ] && LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$_folder
    elif [ "$_position" = "prepend" ]; then
        [ $_do_add -ne 0 ] && [ -d $_folder ] && [ -x $_folder ] && LD_LIBRARY_PATH=$_folder:$LD_LIBRARY_PATH
    fi

    export LD_LIBRARY_PATH
}

set_default_colors() {
    PS_COLORS=(
        [Reset]='\[\e[0m\]'
        [Default]='\[\e[0;39m\]'
        [Black]='\[\e[0:30m\]'
        [Red]='\[\e[0;31m\]'
        [Green]='\[\e[0;32m\]'
        [Yellow]='\[\e[0;33m\]'
        [Blue]='\[\e[0;34m\]'
        [Purple]='\[\e[0;35m\]'
        [Cyan]='\[\e[0;36m\]'
        [White]='\[\e[0;37m\]'
        [On_Default]='\[\e[49m\]'
        [On_Black]='\[\e[40m\]'
        [On_Red]='\[\e[41m\]'
        [On_Green]='\[\e[42m\]'
        [On_Yellow]='\[\e[43m\]'
        [On_Blue]='\[\e[44m\]'
        [On_Purple]='\[\e[45m\]'
        [On_Cyan]='\[\e[46m\]'
        [On_White]='\[\e[47m\]'
   )
}

set_default_symbols() {
    PS_SYMBOLS=(
        [Separator]=$'\u2BC8'
        [Clock]=$'\360\237\225\222'
        [Folder]=$'\360\237\223\201'
    )
}

show_prompt_colors() {
    for key in ${!PS_COLORS[@]}; do
        echo -e ${PS_COLORS[$key]} $key ${PS_COLORS[Reset]}
    done
}

add_ps_virtual_env() {
    local fg_color="$1"
    local bg_color="$2"

    PS1+="${fg_color}${bg_color}\$(virt_env)${PS_SYMBOLS[Separator]} "
}

add_ps_git() {
    local fg_color="$1"
    local bg_color="$2"

    PS1+="$fg_color$bg_color \$(git_branch)${PS_SYMBOLS[Separator]} "

}

add_ps_time() {
    local fg_color="$1"
    local bg_color="$2"

    PS1+="$fg_color$bg_color${PS_SYMBOLS[Clock]} \d at \A ${PS_SYMBOLS[Separator]} "
}

add_ps_pwd() {
    local fg_color="$1"
    local bg_color="$2"

    PS1+="$fg_color$bg_color ${PS_SYMBOLS[Folder]} \w ${PS_SYMBOLS[Separator]} "
}

git_color() {
    # ------------------------------------------------------------------- #
    # Sets the background color for the active git branch based on it's 
    # status.
    # 
    # call:
    #     git_color $COL1 $COL2 $COL3 $COL4
    #
    #     where $COL1 is used when a repository has uncommitted changes.
    #           $COL2 is used when a repository is ahead of remote.
    #           $COL3 is used when a repository is up to date with remote.
    #           $COL4 is used when not in a repository.
    # ------------------------------------------------------------------- #
    local in_git="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
    local git_status="$(git status 2> /dev/null)"

    if [[ "$in_git" == "true" ]]; then
        if [[ $git_status =~ "nothing to commit" ]]; then
            echo -e $3
        elif [[ ! $git_status =~ "working directory clean" ]]; then
            echo -e $1
        elif [[ $git_status =~ "Your branch is ahead of" ]]; then
            echo -e $2
        fi
    else
        echo -e $4
    fi
}

git_branch() {
    # ------------------------------------------------------------------- #
    # Checks if directory is a git repository and returns the active 
    # branch if so.
    # ------------------------------------------------------------------- #
    if git rev-parse --git-dir > /dev/null 2>&1; then
        branch="$(git branch 2>/dev/null | grep '^*' | colrm 1 2)"
        afiles="$(git diff --cached --name-only | wc -l)"
        dfiles="$(git ls-files -d | wc -l)"
        mfiles="$(git ls-files -m | wc -l)"
        staged="$(git diff --stat | wc -l)"
        if [ $staged -gt 0 ]; then
            unstaged="!$staged"
        else
            unstaged=""
        fi
        staged="$(git diff-index --cached HEAD | wc -l)"
        if [ $staged -gt 0 ]; then
            uncommitted="~$staged"
        else
            uncommitted=""
        fi
        echo -e "\uE0A0 [$branch \u2261 +$afiles ~$mfiles -$dfiles | $unstaged $uncommitted]"
    else
        echo -e "\uE0A0 "
    fi
}

virt_env() {
    # ------------------------------------------------------------------- #
    # Checks if Python is operating in a virtual environment and, if so,
    # returns the name of the virtual environment.
    # ------------------------------------------------------------------- #
    python="$(python -V | cut -d ' ' -f2)"
    snake=$'\360\237\220\215'
    if [ "x$VIRTUAL_ENV" != "x" ]; then
        echo -e "$snake [$python in $(basename $VIRTUAL_ENV)]"
    else
        echo -e "$snake [Global $python]"
    fi
}

